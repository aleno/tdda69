Uppgift 9: Makroutveckling
==========================

Deluppgift A
------------

%let kommer att expanderas 301 ggr. Detta eftersom vi kommer att hoppa igenom
funktionen 300ggr och ytterliggare en gång för att vi tycker det är kul att
gå ett steg längre för att hitta exit condition.

Deluppgift B
------------

Det kommer inte att funka eftersom att %define hanteras av eval-definition.
Denna funktion kallar define-variable! med första definition-variable av
uttrycket ((%gensym (%quote unique)) param1 param2) eftersom detta yttryck
aldrig evalueras kommer inte makrot att expanderas till en gilltig form.

Deluppgift C
------------

I nuvarande lösning så är det inte möjligt. 
För att kunna tillåta denna konstruktion måste vi se till att eval-definition
expanderar sin definition-variable om det inte är en variabel när den kallar
define-variable!.

(if (variable? (definition-variable exp))
    (definition-variable exp)
  (eval-%scheme (definition-variable exp) env))

Uppgift 10: Tidigare expandering av makron
==========================================

;; Macron som ska expanderas
(define macros '(%let))

;; Expanderar macron i ett uttryck.
(define (expand-macro exp)
  (cond
    ((null? exp) '())
    ((not (list? exp)) exp)
    ((eq? (car exp) 'quote) exp)
    ;; För extra generell lösning kalla eval-%scheme med (car exp) här,
    ;; och kolla om den är taggad $macro.
    ((memq (car exp) macros)
     (apply-%scheme
      (cdr (eval-%scheme (car exp) the-global-environment))
      (map expand-macro (cdr exp))))
    (else
     (map expand-macro exp))))

Ändringar i driver-loop

      (let ((expanded-exp (expand-macro %exp)))
        (display "Expanded: ")
        (display expanded-exp)
        (newline)
        (user-print (eval-%scheme expanded-exp the-global-environment)))
		
Vi kan nu skicka makron som argument till andra funktioner.
Vi testar genom att köra ett makro i ett makro.

%==> (%define sum 4)
Expanded: (%define sum 4)
ok
%==> (%let ((foo (%lambda (a) (%* sum a))))
                     (%let ((val (foo 5)))
                           (%+ val 13)))
Expanded: ((%lambda (foo) ((%lambda (val) (%+ val 13)) (foo 5))) (%lambda (a) (%* sum a)))
33

Om vi lägger till %gensym till makro expansions listan kan vi testa med.

%==> (%display (%gensym (%quote unique)))
Expanded: (%display (%quote foo))